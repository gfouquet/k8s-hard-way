---
- tempfile:
    state: directory
    prefix: ansible-tmp
  register: tmp_path
  tags:
    - ca-cert
    - worker-cert
    - client-certs
    - api-server-cert

- debug:
    msg: "Temp folder : {{ tmp_path.path }}"
  tags:
    - ca-cert
    - worker-cert
    - client-certs
    - api-server-cert

# Create CA certificates
# ---------------------
- copy:
    src: "{{ item }}"
    dest: "{{ tmp_path.path }}/{{ item }}"
  loop:
    - ca-config.json
    - ca-csr.json
  tags:
    - ca-cert
    - worker-cert
    - client-certs
    - api-server-cert

- shell: "cfssl gencert -initca ca-csr.json | cfssljson -bare ca"
  args:
    chdir: "{{ tmp_path.path }}"
  tags:
    - ca-cert
    - worker-cert
    - client-certs
    - api-server-cert

# Create client certificates
# --------------------------
- copy:
    src: "{{ csr_file }}"
    dest: "{{ tmp_path.path }}/{{ csr_file }}"
  vars:
    csr_file: "{{ item }}-csr.json"
  loop:
    "{{ client_certs }}"
  tags:
    - client-certs

- shell: "cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes \
            {{ item }}-csr.json | cfssljson -bare {{ item }}"
  args:
    chdir: "{{ tmp_path.path }}"
  loop:
    "{{ client_certs }}"
  tags:
    - client-certs

# Create workers certificates
# ---------------------------
- template:
    src: worker-csr.json
    dest: "{{ tmp_path.path }}/{{ hostvars[item].name }}-csr.json"
  vars:
    worker_name: "{{ hostvars[item].name  }}"
  loop: "{{ groups.workers }}"
  tags:
    - worker-cert

#- debug:
#    msg: "wn : {{ worker_name }}"
#  vars:
#    worker_name: "{{ hostvars[item]  }}"
##    worker_public_ip: "{{ hostvars[item].ansible_host }}"
##    worker_internal_ip: "{{ hostvars[item].internal_ip }}"
#  loop: "{{ groups.workers }}"
#  tags:
#    - worker-cert

- shell: "cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ worker_name }},{{ worker_public_ip  }},{{ worker_internal_ip }} \
    -profile=kubernetes \
    {{ worker_name }}-csr.json | cfssljson -bare {{ worker_name }}"
  args:
    chdir: "{{ tmp_path.path }}"
  vars:
    worker_name: "{{ hostvars[item].name  }}"
    worker_public_ip: "{{ hostvars[item].ansible_host }}"
    worker_internal_ip: "{{ hostvars[item].internal_ip }}"
  loop: "{{ hostvars.localhost.groups.workers }}"
  tags:
    - worker-cert

# Create API server certificate
# -----------------------------
- copy:
    src: "{{ csr_file }}"
    dest: "{{ tmp_path.path }}/{{ csr_file }}"
  vars:
    csr_file: kubernetes-csr.json
  tags:
    - api-server-cert

# Note : 10.32.0.1 is internal VIP of K8s API. see https://github.com/kelseyhightower/kubernetes-the-hard-way/issues/105
# TODO parameterize master IPs
- shell: "cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,{{ kube_public_ip }},127.0.0.1,kubernetes.default \
            -profile=kubernetes \
            kubernetes-csr.json | cfssljson -bare kubernetes"
  args:
    chdir: "{{ tmp_path.path }}"
  tags:
    - api-server-cert

# Create Kubelet kube config
# --------------------------
- template:
    src: create-worker-config.sh
    dest: "{{ tmp_path.path }}/"
    mode: "+x"
  tags:
    - kube-config

- shell: "./create-worker-config.sh {{ hostvars[item].name }}"
  loop: "{{ hostvars.localhost.groups.workers }}"
  args:
    chdir: "{{ tmp_path.path }}"
  tags:
    - kube-config

- template:
    src: "create-{{ item }}-config.sh"
    dest: "{{ tmp_path.path }}/"
    mode: "+x"
  loop:
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - admin
  tags:
    - kube-config

- shell: "./create-{{ item }}-config.sh"
  args:
    chdir: "{{ tmp_path.path }}"
  loop:
    - kube-proxy
    - kube-controller-manager
    - kube-scheduler
    - admin
  tags:
    - kube-config

# Hackish - this fact will be used by other roles
- set_fact:
    work_dir: "{{ tmp_path.path }}"

